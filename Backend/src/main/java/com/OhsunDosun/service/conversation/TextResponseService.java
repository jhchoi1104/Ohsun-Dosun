package com.OhsunDosun.service.conversation;


import com.OhsunDosun.dto.ChatbotResponse;
import com.OhsunDosun.dto.ClassificationResponse;
import com.OhsunDosun.dto.ConversationRequest;
import com.OhsunDosun.dto.Log;
import com.OhsunDosun.service.ConversationRoomService;
import com.OhsunDosun.service.conversation.task.*;
import com.fasterxml.jackson.core.JsonProcessingException;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.json.JSONObject;
import org.springframework.stereotype.Service;

import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class TextResponseService {

    private final ConversationRoomService conversationRoomService;
    private final TokenService tokenService;

    private final ClassificationTaskService classificationTaskService;
    private final GreetingTaskService greetingTaskService;
    private final DailyConversationTaskService dailyConversationTaskService;
    private final TransferService transferService;
    private final LoanService loanService;
    private final ConsultantService consultantService;
    private final NewissuanceService newissuanceService;
    private final ReissuanceService reissuanceService;
    private final FavoritesService favoritesService;

    public ChatbotResponse TextResponse(ConversationRequest request, int userNo) throws JsonProcessingException {
        ChatbotResponse response;
        String input = request.getInput();

        // Ïù¥Ï†Ñ ÎåÄÌôîÎÇ¥Ïö© Ï°∞Ìöå
        List<Log> conversationLogs = conversationRoomService.findLastNByConversationRoomNo(1, request.getConversationRoomNo());

        // Ï≤´ Ïù∏ÏÇ¨ ÏÉùÏÑ±
        if (conversationLogs.isEmpty() && request.getInput().equals("Greeting")) {
            response = greetingTaskService.generateGreeting(request, userNo);
            log.info("üñêÔ∏è [{}] Greeting generated for: {}", userNo, response.getContent());
            return response;
        }

        // ÏÇ¨Ïö©Ïûê ÏûÖÎ†•Ïóê Îî∞Î•∏ ÏûëÏóÖ Î∂ÑÎ•ò
        ClassificationResponse classificationResult = classificationTaskService.classificationTask(input, conversationLogs);
        String mainTaskNo = classificationResult.getMainTaskNumber();
        String subTaskNo = classificationResult.getSubTaskNumber();
        Boolean taskLocked = classificationResult.getTaskLocked();
        log.info("üîó1Ô∏è‚É£ [{}] Task Classification Completed by - Main Task No: \u001B[34m{}\u001B[0m, Sub Task No: \u001B[34m{}\u001B[0m", userNo, mainTaskNo, subTaskNo, taskLocked);

        // Main Task Î∂ÑÎ•ò
        switch (mainTaskNo) {
            // ÎåÄÏ∂ú ÏÑúÎπÑÏä§
            case "001" -> {
                response = loanService.generateLoanConversation(input, conversationLogs);
            }

            //ÏÉÅÎã¥Ïõê Ïó∞Í≤∞ ÏÑúÎπÑÏä§
            case "002" -> {
                response = consultantService.generateConsultConversation(input, conversationLogs);
                response.setSubTaskNo(subTaskNo);
            }

            // ÏÜ°Í∏àÌïòÍ∏∞ ÏÑúÎπÑÏä§
            case "003" -> {

                response = transferService.generateTransferConversation(input, conversationLogs);
                response.setSubTaskNo(subTaskNo);
                log.info("response json Í∞ùÏ≤¥ ÌôïÏù∏ : {}" , response);
                ObjectMapper objectMapper = new ObjectMapper();
                String jsonString = response.getContent()
                        .replaceAll("```json", "")
                        .replaceAll("```", "")
                        .trim();
                JsonNode jsonNode = objectMapper.readTree(jsonString);
                Integer step = jsonNode.get("step").asInt();
                System.out.println("step : Í∞íÏùÄ " + step);
                response.setStep(step);
                if(step == 2){
                    String step2_content_name = jsonNode.get("name").asText();
                    Long userId = Long.valueOf(userNo); // ÌòÑÏû¨ Ïú†Ï†ÄÏùò IDÎ°ú ÏÑ§Ï†ï

                    // Î≥ÑÏπ≠ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
                    boolean favoriteExists = favoritesService.isFavoriteExists(userId, step2_content_name);

                    // ÏÇ¨Ïö©ÏûêÍ∞Ä Í∏àÏï°Ïóê ÎåÄÌïú Ï†ïÎ≥¥Î•º ÎØ∏Î¶¨ ÎßêÌïú Í≤ΩÏö∞ÏôÄ Í∑∏Î†áÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Íµ¨Î∂ÑÌïòÍ∏∞ ÏúÑÌï®
                    JSONObject step2_content_json = new JSONObject();


                    // DB user Ïù¥Î¶Ñ ÌòπÏùÄ Î≥ÑÏπ≠ Ï°∞Ìöå
                    String step2_content_message;
                    if (favoriteExists) { //Ï°¥Ïû¨ÌïòÎäî Í≤ΩÏö∞ 003.a.01
                        step2_content_message = String.format("%sÎãòÏóêÍ≤å ÏÜ°Í∏àÌïòÏãúÍ≤†ÏäµÎãàÍπå?", step2_content_name);
                        System.out.println("Ïó¨Í∏∞Î°ú Ïò§ÎäîÍ±¥Í∞Ä??");
                        step2_content_json.put("step", 2);
                    } else { //Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùÑ Í≤ΩÏö∞ 003.a.02
                        step2_content_message = "ÏÜ°Í∏àÌïòÏã†Ï†Å ÏóÜÎäî Î∂ÑÏù¥ÎÑ§Ïöî. Í≥ÑÏ¢åÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.";
                        step2_content_json.put("step", 3);

                    }

                    step2_content_json.put("content", step2_content_message);

                    String name = jsonNode.get("name").asText();
                    if(!name.isEmpty()){
                        step2_content_json.put("name", name);
                    } else{
                        step2_content_json.put("name","");
                    }

                    String amount = jsonNode.get("amount").asText();
                    if(!amount.isEmpty()){
                        step2_content_json.put("amount", amount);
                    } else{
                        step2_content_json.put("amount","");
                    }
                    String step2_content_string = step2_content_json.toString();
                    response.setContent(step2_content_string);

                }

            }

            // ÌÜµÏû• Ïû¨Î∞úÌñâ ÏÑúÎπÑÏä§
            case "004" -> {
                response = reissuanceService.generateReissuanceConversation(input, conversationLogs);
                response.setSubTaskNo(mainTaskNo);

            }

            // ÌÜµÏû• Ïã†Í∑ú ÏÉùÏÑ± ÏÑúÎπÑÏä§
            case "005" -> {
                response = newissuanceService.generateNewissuanceConversation(input, conversationLogs);
                response.setSubTaskNo(mainTaskNo);
            }


            // ÏùºÏÉÅ ÎåÄÌôî
            default -> {
                response = dailyConversationTaskService.generateDailyConversation(input, conversationLogs);
            }
        }

        // Ï†ÑÏ≤¥ token Í≥ÑÏÇ∞
        tokenService.calculateToken(response, classificationResult);

        log.info("üîó2Ô∏è‚É£ [{}] Response generated for: {}", userNo, response.getSubTaskNo());
        return response;
    }
}
